name: release

on:
  push:
    tags:
      - "stable"

env:
  PACKAGE_NAME: "basepak"
  OWNER: "tomaDev"
  VERSION_FILE: "src/basepak/VERSION"

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract project version
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="$(cat ${{ env.VERSION_FILE }})"
            NEW_VERSION="${VERSION%.*}.$((${VERSION##*.}+1))"
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "New Version is $NEW_VERSION"
          else
            echo "No tag found"
            exit 1
          fi
  
  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | grep -oP '"releases":\{"\K[^"]+' | sort -rV | head -n 1)
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  update_version:
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Bump version
        run: printf "${{ needs.details.outputs.new_version }}" > ${{ env.VERSION_FILE }}

      - name: Commit version bump
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ env.VERSION_FILE }}
          git commit -m "Bump version to ${{ needs.details.outputs.new_version }}"
          git push origin HEAD:main

  setup_and_build:
    needs: [update_version]
    name: python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "0.5.1"
#          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Build the project
        run: uv build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  github_release:
    name: Create GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION=v"${{ needs.details.outputs.new_version }}"
          gh release create $VERSION dist/* --title $VERSION --generate-notes

#  pypi_publish:
#    name: Upload release to PyPI
#    needs: [setup_and_build]
#    runs-on: ubuntu-latest
#    environment:
#      name: release
#    permissions:
#      id-token: write
#    steps:
#      - name: Download artifacts
#        uses: actions/download-artifact@v3
#        with:
#          name: dist
#          path: dist/
#
#      - name: Publish distribution to PyPI
#        uses: pypa/gh-action-pypi-publish@release/v1
